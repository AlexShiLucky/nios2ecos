<?xml version="1.0" encoding="ISO-8859-1"?>

<!--=========================================================================##
 * mlt_nios2.ldi.gtf
 *
 * GTF script to generate the file: mlt_nios2.ldi.
 *
 *=============================================================================
 *###ECOSGPLCOPYRIGHTBEGIN####
 * 
 * This file is part of eCos, the Embedded Configurable Operating System.
 *
 * eCos is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 or (at your option) any later version.
 *
 * eCos is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with eCos; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 *
 * As a special exception, if other files instantiate templates or use macros
 * or inline functions from this file, or you compile this file and link it
 * with other works to produce a work based on this file, this file does not
 * by itself cause the resulting work to be covered by the GNU General Public
 * License. However the source code for this file must still be made available
 * in accordance with section (3) of the GNU General Public License.
 *
 * This exception does not invalidate any other reasons why a work based on
 * this file might be covered by the GNU General Public License.
 * 
 *###ECOSGPLCOPYRIGHTEND####
 *==========================================================================-->

<!-- This GTF script is used to generate the Nios II partial linker script, 
     mlt_nios2.ldi. This file is constructed to match the memory
     configuration of the associated the SOPC builder project. It is preprocessed
     with the file nios2.ld to create the linker script for the system.-->

<template name="mlt_nios2.ldi">

    <!-- After calling this script, the variable GTF_DIR will be reset to point
         to the gtf directory of the Nios2 kit. The original value can be 
         obtained using the variable ECOS_GTF_DIR. This allows us to reuse 
         some of the scripts supplied with the Nios II kit. -->

    <call gtf="%GTF_DIR%/ECOS_GTF_DIR.gtf"/>

    <call gtf="%GTF_DIR%/check_version.gtf"/>

    <call gtf="%GTF_DIR%/CPU.gtf"/>

    <call gtf="%GTF_DIR%/RESET_ADDRESS.gtf"/>

    <call gtf="%GTF_DIR%/EXC_ADDRESS.gtf"/>

    <set_variable variable="MEMORY_MODULES_ONLY" to="1"/>
    <export variable="MEMORY_MODULES_ONLY"/>
    <call gtf="%GTF_DIR%/MODULE_lists.gtf"/>

    <set_variable variable="RESET_ROUTINE_SIZE" to="32"/>

    <text>/* %FILE_NAME%
 *
 * Machine generated for a CPU named "%CPU%" as defined in:
 * %PTF_NAME%
 *
 * Generated: %TIMESTAMP%
 *
 */

    </text>

    <include source="%GTF_DIR%/warning.h"/>

    <include source="%GTF_DIR%/license.h"/>

    <set_variable variable="TRUE" to="1"/>
    <set_variable variable="FALSE" to="0"/>

    <text>
<![CDATA[#include <cyg/infra/cyg_type.inc>]]>

    </text>

    <!-- the memory segments... -->

    <text>
MEMORY
{
    reset : ORIGIN = CYGBLD_GLOBAL_START_ADDRESS, LENGTH = %RESET_ROUTINE_SIZE%
    </text> <!-- ...always one for the reset address -->

    <!-- ...and one for each MODULE/SLAVE -->

    <set_variable variable="MEMORY_RANGE_LIST" to="()"/>    <!-- while we're looking at all the memories, might as well create these lists to use below -->
    <set_variable variable="PARTITION_ADDRESS_LIST" to=""/>
    <set_variable variable="EXCEPTIONS_IN_ROM" to="false"/>

    <for_each variable="MODULE_SLAVE" index_variable="MODULE_SLAVE_LIST_INDEX" list="%MODULE_SLAVE_LIST%">
        <export variable="MODULE_SLAVE"/>
        <call gtf="%GTF_DIR%/BASE_ADDRESS_and_ADDRESS_SPAN.gtf"/>

        <set_variable variable="MODULE_SLAVE_NAME" to="list_get( %MODULE_SLAVE_NAME_LIST%, %MODULE_SLAVE_LIST_INDEX% )"/>
        <set_variable variable="IS_NON_VOLATILE" ptf_path="SYSTEM/MODULE %MODULE_SLAVE%/SYSTEM_BUILDER_INFO/Is_Nonvolatile_Storage"/>
		<set_variable variable="NEW_BASE_ADDRESS" to="%BASE_ADDRESS%"/>    
        <switch>
            <!-- if the base address for this MODULE/SLAVE is the same as the reset address, then make room for the reset handler -->
             <if condition="or(and( gt( %RESET_ADDRESS%, %BASE_ADDRESS% ), lt( %RESET_ADDRESS%, add( %BASE_ADDRESS%, %ADDRESS_SPAN% ) ) ), eq( %RESET_ADDRESS%, %BASE_ADDRESS% ) )">
                <set_variable variable="BASE_ADDRESS" to="add( %BASE_ADDRESS%, %RESET_ROUTINE_SIZE% )"/>
                <set_variable variable="NEW_BASE_ADDRESS" to="(CYGBLD_GLOBAL_START_ADDRESS + %RESET_ROUTINE_SIZE%)"/>                 
                <set_variable variable="ADDRESS_SPAN" to="sub( %ADDRESS_SPAN%, %RESET_ROUTINE_SIZE% )"/>
                <break/>
            </if>

            <!-- if the reset address is in the address range of this MODULE/SLAVE, then we split the segment in two... -->
            <if condition="and( gt( %RESET_ADDRESS%, %BASE_ADDRESS% ), lt( %RESET_ADDRESS%, add( %BASE_ADDRESS%, %ADDRESS_SPAN% ) ) )">
                <!-- ...everything less than the reset address is unused -->
                <set_variable variable="NEW_SEGMENT_ADDRESS_SPAN" to="radix( sub( %RESET_ADDRESS%, %BASE_ADDRESS% ), 10 )"/>
                <text>    %MODULE_SLAVE_NAME%_UNUSED : ORIGIN = %NEW_BASE_ADDRESS%, LENGTH = %NEW_SEGMENT_ADDRESS_SPAN%
                </text>
                <!-- ...and start the usable segment after the reset handler -->
                <set_variable variable="NEW_BASE_ADDRESS" to="add( %RESET_ADDRESS%, %RESET_ROUTINE_SIZE% )"/>
                <set_variable variable="ADDRESS_SPAN" to="sub( %ADDRESS_SPAN%, %NEW_SEGMENT_ADDRESS_SPAN%, %RESET_ROUTINE_SIZE% )"/>
            </if>
        </switch>

        <!-- ASSUME that the exception address is always higher than the reset address (if they're in the same memory) -->

        <switch>
            <!-- if the exception address is the same as the base address (for this MODULE/SLAVE), then the exception section is at the start of this segment -->
            <if condition="eq( %EXC_ADDRESS%, %BASE_ADDRESS% )">
                <set_variable variable="EXCEPTIONS_SEGMENT" to="%MODULE_SLAVE_NAME%"/>
                <if condition="eq( %IS_NON_VOLATILE%, 1 )">
                    <set_variable variable="EXCEPTIONS_IN_ROM" to="true"/>
               </if>
 
                <break/>
            </if>
            <!-- if the exception address is in the address range of this MODULE/SLAVE, then we split the segment in two... -->
            <if condition="and( gt( %EXC_ADDRESS%, %BASE_ADDRESS% ), lt( %EXC_ADDRESS%, add( %BASE_ADDRESS%, %ADDRESS_SPAN% ) ) )">
                <!-- ...everything less than the exception address is unused -->
                <set_variable variable="NEW_SEGMENT_ADDRESS_SPAN" to="radix( sub( %EXC_ADDRESS%, %BASE_ADDRESS% ), 10 )"/>
                <text>    %MODULE_SLAVE_NAME%_UNUSED : ORIGIN = %NEW_BASE_ADDRESS%, LENGTH = %NEW_SEGMENT_ADDRESS_SPAN%
                </text>
                <!-- ...and start the usable segment at the exception address -->
                <set_variable variable="NEW_BASE_ADDRESS" to="%EXC_ADDRESS%"/>
                <set_variable variable="ADDRESS_SPAN" to="sub( %ADDRESS_SPAN%, %NEW_SEGMENT_ADDRESS_SPAN% )"/>
                <set_variable variable="EXCEPTIONS_SEGMENT" to="%MODULE_SLAVE_NAME%"/>
                <if condition="eq( %IS_NON_VOLATILE%, 1 )">
                    <set_variable variable="EXCEPTIONS_IN_ROM" to="true"/>
                </if>
            </if>
        </switch>

        <set_variable variable="PHYSICAL_END"
                      to="add( %BASE_ADDRESS%, %ADDRESS_SPAN% )"/>
        <set_variable variable="PARTITION_ADDRESS_LIST"
                      to='list_add( %PARTITION_ADDRESS_LIST%, %PHYSICAL_END% )'/>
        <set_variable variable="MEMORY_RANGE_LIST"
                      to='list_add( %MEMORY_RANGE_LIST%, "(%BASE_ADDRESS%,%PHYSICAL_END%)" )'/>

        <text>    %MODULE_SLAVE_NAME% : ORIGIN = %NEW_BASE_ADDRESS%, LENGTH = %ADDRESS_SPAN%
        </text>
    </for_each>

    <text>}
    </text>
    <if condition="eq( %EXCEPTIONS_IN_ROM%, true )">
       <text>
<![CDATA[#define CYG_HAL_EXCEPTIONS_IN_ROM]]>
       </text>
    </if>

    <text><![CDATA[
SECTIONS
{
    SECTIONS_BEGIN
    SECTIONS_entry (reset, CURRENT_LMA, LMA_EQ_VMA)
#if !defined(CYG_HAL_STARTUP_ROM) || defined(CYG_HAL_EXCEPTIONS_IN_ROM) 
    SECTIONS_exceptions (]]>%EXCEPTIONS_SEGMENT%<![CDATA[, CURRENT_LMA, LMA_EQ_VMA)
#endif /* !defined(CYG_HAL_STARTUP_ROM) || defined(CYG_HAL_EXCEPTIONS_IN_ROM) */
#ifndef CYG_HAL_STARTUP_ROM
    SECTIONS_rom_monitor_rwdata (CURRENT_LMA, LMA_EQ_VMA)
#endif /* CYG_HAL_STARTUP_ROM */
    SECTIONS_rom_monitor_rodata (CURRENT_LMA, LMA_EQ_VMA)
    SECTIONS_rom_monitor_text (CURRENT_LMA, LMA_EQ_VMA)
    SECTIONS_text (CURRENT_LMA, LMA_EQ_VMA)
    SECTIONS_rodata (CURRENT_LMA, LMA_EQ_VMA)
#ifdef CYG_HAL_STARTUP_ROM
#ifndef CYG_HAL_EXCEPTIONS_IN_ROM
    SECTIONS_exceptions (]]>%EXCEPTIONS_SEGMENT%<![CDATA[, CURRENT_LMA, FOLLOWING(.rodata))
    SECTIONS_rom_monitor_rwdata (CURRENT_LMA, FOLLOWING(.exceptions))
#else
    SECTIONS_rom_monitor_rwdata (CURRENT_LMA, FOLLOWING(.rodata))
#endif /* CYG_HAL_EXCEPTIONS_IN_ROM */
    SECTIONS_rwdata (CURRENT_LMA, FOLLOWING(.rom_monitor_rwdata))
#else /* !CYG_HAL_STARTUP_ROM */
    SECTIONS_rwdata (CURRENT_LMA, LMA_EQ_VMA)
#endif /* CYG_HAL_STARTUP_ROM */
    SECTIONS_bss (CURRENT_LMA, LMA_EQ_VMA)
    CYG_LABEL_DEFN(__heap1) = ABSOLUTE(.);

    CYG_LABEL_DEFN(cyg_interrupt_stack_base) = ABSOLUTE(CYGMEM_REGION_ram + CYGMEM_REGION_ram_SIZE - CYGNUM_HAL_COMMON_INTERRUPTS_STACK_SIZE);
    CYG_LABEL_DEFN(cyg_interrupt_stack) = ABSOLUTE(CYGMEM_REGION_ram + CYGMEM_REGION_ram_SIZE);

    SECTIONS_END
}
]]>
</text>

</template>
